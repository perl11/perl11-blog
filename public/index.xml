<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>perl11 blog</title>
    <link>https://perl11.github.io/blog/</link>
    <description>Recent content on perl11 blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2016 Copyright Reini Urban</copyright>
    <lastBuildDate>Mon, 22 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://perl11.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Link-time and post-link optimizations</title>
      <link>https://perl11.github.io/blog/bolt.html</link>
      <pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://perl11.github.io/blog/bolt.html</guid>
      <description>I&amp;rsquo;ve tried several traditional linker optimizations on cperl recently. The easiest is
LTO or &amp;ldquo;Link Time Optimization&amp;rdquo; via gcc -flto=4 or clang -flto=thin. This requires the gold linker, and enables multi-threaded link-time optimizations.
For gcc my configure script does
CC=${CC:-ccache gcc} ./Configure -sder -Dcc=&amp;quot;$CC&amp;quot; \ -Dld=&amp;quot;$CC -fuse-linker-plugin&amp;quot; \ -Accflags=&amp;quot;-flto=4 -fuse-ld=gold -msse4.2 -march=native&amp;quot; ...  and for clang
CC=${CC:-ccache clang-7} ./Configure -sder -Dcc=&amp;quot;$CC&amp;quot; \ -Dranlib=llvm-ranlib-7 -Dar=llvm-ar-7 -Dfull_ar=/usr/bin/llvm-ar-7 \ -Accflags=&amp;quot;-DLTO -flto=thin -msse4.2 -march=native&amp;quot; .</description>
    </item>
    
    <item>
      <title>Removal of the perl4 &#39; package seperator</title>
      <link>https://perl11.github.io/blog/quote-identifiers.html</link>
      <pubDate>Fri, 12 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://perl11.github.io/blog/quote-identifiers.html</guid>
      <description>The removal of the old and deprecated perl4 single quote character &#39; as valid package seperator in cperl went through various steps. It&amp;rsquo;s also explained in perldata.
There are still two package separators in perl5:
A double colon (::) and a single quote (&#39;). Normal identifiers can start or end with a double colon, and can contain several parts delimited by double colons. Single quotes within perl5 have similar rules, but with the exception that they are not legal at the end of an identifier: That is, $&#39;foo and $foo&#39;bar are legal, but $foo&#39;bar&#39; is not.</description>
    </item>
    
    <item>
      <title>There be getcwd dragons</title>
      <link>https://perl11.github.io/blog/fastcwd.html</link>
      <pubDate>Thu, 11 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://perl11.github.io/blog/fastcwd.html</guid>
      <description>The Cwd perl5 module contains various functions to return the string of the current working directory. The POSIX API only contains getcwd(), some provide also getwd() - ignored in perl, and the glibc also provides get_current_dir_name() and supports a NULL argument for getcwd(char *buf, size_t size). The Cwd module adds cwd, getcwd, getdcwd for Windows with a drive letter, fastcwd, fastgetcwd.
symlinks The simplify the explanation of the various variants, which in theory should all return the same string, consider symlinks.</description>
    </item>
    
    <item>
      <title>cperl classes</title>
      <link>https://perl11.github.io/blog/cperl-classes.html</link>
      <pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://perl11.github.io/blog/cperl-classes.html</guid>
      <description>Subtitle: Why a MOP is not always a good idea cperl being a perl11, i.e. 5+6=11, of course means that cperl classes are designed after perl5 and perl6 classes. perl5 does not have a builtin class keyword, but allows to add keywords to be added at runtime. cperl and perl6 of course do have a builtin class keyword.
The backcompat problem with a new builtin keyword is, that some usages of variables, package or function names will not work anymore, because the new keyword stepped over it.</description>
    </item>
    
    <item>
      <title>safeclib-3.3 and its new compile-time checks</title>
      <link>https://perl11.github.io/blog/safeclib-3.3.html</link>
      <pubDate>Sat, 03 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://perl11.github.io/blog/safeclib-3.3.html</guid>
      <description>In the previous &amp;ldquo;The sad state of foldcase and string comparisons&amp;rdquo; article I already mentioned my safeclib library improvements, for the surpringly rather unique ability to search for strings (with Unicode support).
With the recent safeclib-3.3 release I made the almost same improvements as in cperl: Adding lots of compile-time checks and seperating them out of the run-time. Do less branching at run-time when the compiler can already prove that a certain branch or check was already done at compile-time.</description>
    </item>
    
    <item>
      <title>The sad state of foldcase and string comparisons</title>
      <link>https://perl11.github.io/blog/foldcase.html</link>
      <pubDate>Sat, 16 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://perl11.github.io/blog/foldcase.html</guid>
      <description>You probably heard about case-folding or foldcase before. Unicode defines CaseFolding mappings for some upper-case characters, which in full casefolding mode will expand some exotic characters to larger sequences. In simple mode it will do 1:1 tolower() mappings.
 The perl documentation has this to say:
fc Returns the casefolded version of EXPR. This is the internal function implementing the &amp;ldquo;\F&amp;rdquo; escape in double-quoted strings.
Casefolding is the process of mapping strings to a form where case differences are erased; comparing two strings in their casefolded form is effectively a way of asking if two strings are equal, regardless of case.</description>
    </item>
    
    <item>
      <title>Attribute arguments</title>
      <link>https://perl11.github.io/blog/attributes-args.html</link>
      <pubDate>Sat, 27 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://perl11.github.io/blog/attributes-args.html</guid>
      <description>perl5 had broken attribute handling forever perl5 attributes were invented to provide extendable hooks to attach data or run code at any data, and made for nice syntax, almost resembling other languages.
E.g.
my $i :Int = 1; sub calc :prototype($$) { shift + shift }  There were a few number of builtin attributes, like :lvalue, :shared, :const, adding a flag to a function or data, and you could add package-specific for compile-time or run-time hooks to process arbitrary custom attributes.</description>
    </item>
    
    <item>
      <title>strict names</title>
      <link>https://perl11.github.io/blog/strict-names.html</link>
      <pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://perl11.github.io/blog/strict-names.html</guid>
      <description>Consistent identifier parsing rules perl5 and cperl older than 5.27.0 accepts any string as valid identifier name when being created under no strict &#39;refs&#39; at run-time, even when most such names are illegal, and cannot be handled by most external modules. Even invalid unicode is allowed.
cperl 5.26 fixed embedded NUL&amp;rsquo;s and invalid unicode identifiers illegal, and normalizes unicode identifiers in the parser.
Since cperl 5.27.1 dynamically created names are treated the same way as when they are parsed.</description>
    </item>
    
    <item>
      <title>strict hashpairs</title>
      <link>https://perl11.github.io/blog/strict-hashpairs.html</link>
      <pubDate>Tue, 16 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://perl11.github.io/blog/strict-hashpairs.html</guid>
      <description>perl5 optionally warns on odd hash elements my %h = (0,1,2);  is legal code in perl5. The second pair is constructed with the undef value. With use warnings &#39;misc&#39; it will warn at least.
use warnings; my %h = (0,1,2); =&amp;gt; Odd number of elements in hash assignment (WARNING only)  perl6 throws on odd hash elements perl6 is sane and strict by default.
my %h = (0..2); =&amp;gt; Odd number of elements found where hash initializer expected: Found 3 (implicit) elements: Last element seen: 2 in block &amp;lt;unit&amp;gt; at &amp;lt;unknown file&amp;gt; line 1  cperl 5.</description>
    </item>
    
    <item>
      <title>Automatic cperl deployments</title>
      <link>https://perl11.github.io/blog/automatic-deployments.html</link>
      <pubDate>Thu, 27 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://perl11.github.io/blog/automatic-deployments.html</guid>
      <description>Binary packages perl5 relies on external packagers to update and maintain packages for various distributions. It only provides source packages as tarballs.
cperl does a bit better by also providing binary packages for all major platforms. See also Installation at the STATUS page. win32, win64, debian 7 i686, debian 8 amd64, centos 7 x86_64, centos 6 i686+x86_64 and darwin amd64.
Packaging was done with this do-make-cperl-release script, leading to
Centos/Fedora/RHEL as el6 or el7 /etc/yum.</description>
    </item>
    
    <item>
      <title>Unicode Identifiers</title>
      <link>https://perl11.github.io/blog/unicode-identifiers.html</link>
      <pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://perl11.github.io/blog/unicode-identifiers.html</guid>
      <description>Binary names with 5.16 With perl 5.16 added support for binary names, announcing it as support for unicode names. Unicode names were already supported since 5.8.4 with a negative length stored in the hash key of the symbol.
Supporting binary names without any supporting measures opened huge security holes, as names are mapped 1:1 to filenames when searching for a package, and as we know the C API for files or names just ignores a \0, leading to inconsistencies.</description>
    </item>
    
    <item>
      <title>cperl hash tables</title>
      <link>https://perl11.github.io/blog/cperl-hash-tables.html</link>
      <pubDate>Sat, 04 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://perl11.github.io/blog/cperl-hash-tables.html</guid>
      <description>The old perl5 hash table uses   linked lists for its collisions, with slow out-of-cache pointer chasing and data overhead.
  unsorted flags at the end, while some flags are needed for compare.
  has questionable security measures to slow down all cases. seed ok, randomize iter maybe, but randomize the collisions and slow hash funcs is stupid. The security should be fixed with proper collision iteration, not by pseudo-security theatre upfront.</description>
    </item>
    
    <item>
      <title>Worst perl5 bugs</title>
      <link>https://perl11.github.io/blog/worst-perl5-bugs.html</link>
      <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://perl11.github.io/blog/worst-perl5-bugs.html</guid>
      <description>A small list of the worst perl5 bugs, all fixed in cperl DoS It&amp;rsquo;s trivial to DoS a perl5 system.
$a[9223372036854]=0; %a=(0..4294967296);  Examples for a 64bit system, but also trivial on 32bit. It creates a huge array or hash, which runs out of memory in the VMM subsystem which eventually kills the process. cperl dies with &amp;ldquo;Too many elements&amp;rdquo;, here even at compile-time.
No Hash Security Nothing is done against the root-cause of a hash flood denial of service attack with colliding keys, only some security theatre by using slower hash functions and slower collision resolution KEY_PERTURB_RANDOM.</description>
    </item>
    
    <item>
      <title>p5p incompetence</title>
      <link>https://perl11.github.io/blog/p5p-incompetence.html</link>
      <pubDate>Tue, 24 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://perl11.github.io/blog/p5p-incompetence.html</guid>
      <description>So I was continously asked to explain why I call p5p too incompetent to design anything for the perl5 language and any internal VM features.
So far I was reluctant to do so, because users will be as emberrassed as I am, and need a way to got forward. Now that I can offer a way forward it might be easier to publish the detailed criticsm on p5p&amp;rsquo;s incompetence.
From a high level view it&amp;rsquo;s pretty easy to prove.</description>
    </item>
    
    <item>
      <title>The dangerous SipHash myth</title>
      <link>https://perl11.github.io/blog/seed.html</link>
      <pubDate>Sat, 26 Nov 2016 12:35:00 +0200</pubDate>
      
      <guid>https://perl11.github.io/blog/seed.html</guid>
      <description>SipHash claims that its &amp;ldquo;cryptographically strong pseudo random function&amp;rdquo; properties protects against hash table DoS flood attacks. This is wrong, because for a successful attack against a SipHash hash table with chained linked lists or linear probing it is enough to get the secret random seed, and then brute force create collisions, which is doable in &amp;lt;1s for 16k keys, 2m for 16k keys, and from 32k to 268M keys in 4 minutes.</description>
    </item>
    
    <item>
      <title>cperl is not a religion</title>
      <link>https://perl11.github.io/blog/cperl-is-not-a-religion.html</link>
      <pubDate>Tue, 05 Jul 2016 12:35:00 +0200</pubDate>
      
      <guid>https://perl11.github.io/blog/cperl-is-not-a-religion.html</guid>
      <description>The recent perl5 management problems are disturbing Criticizing the broken perl5 development process, the managers and esp. various technical problems is suddenly explicitly disallowed in the various perl5 forums by citing a new &amp;ldquo;bad faith&amp;rdquo; code of conduct rule. Mentioning incompetence of submitters is considered uncivil, and mentioning the marketing lies of the previous &amp;ldquo;pumpkin&amp;rdquo; (admin) is also considered uncivil. But lying, abusing the powers, and constant usage and even encouragement of foul language is interestingly not considered uncivil.</description>
    </item>
    
  </channel>
</rss>